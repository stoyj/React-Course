import { useState } from "react";

const messages = [
  "Learn React ‚öõÔ∏è",
  "Apply for jobs üíº",
  "Invest your new income ü§ë",
];

export default function App() {
  return (
    <div>
      {/*‚úÖ<Steps />
          ‚úÖ–ò–∑–≤–∏–∫–≤–∞ –¥—Ä—É–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Steps. */}
      <Steps />

      {/*‚úÖ<StepMessage step={1}>...</StepMessage> –∏ <StepMessage step={2}>...</      StepMessage>
          ‚úÖ–î–∏–Ω–∞–º–∏—á–Ω–æ —Ä–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ —á—Ä–µ–∑ –ø—Ä–æ–ø—Å.
          ‚úÖ–ó–∞ –≤—Å—è–∫–∞ –æ—Ç —Å—Ç—ä–ø–∫–∏—Ç–µ (step={1} –∏ step={2}) —Å–µ –∏–∑–ø—Ä–∞—â–∞—Ç —Ä–∞–∑–ª–∏—á–Ω–∏ –¥–µ—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏ (children), –∫–æ–∏—Ç–æ —Å—ä–¥—ä—Ä–∂–∞—Ç HTML —Ç–∞–≥–æ–≤–µ (<p>) –∏ –µ–º–æ—Ç–∏–∫–æ–Ω–∏. 
          ‚úÖ–ü—Ä–æ–ø—Å—ä—Ç step –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞ –∫–∞–∫–≤–æ —â–µ —Å–µ –ø–æ–∫–∞–∑–≤–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ StepMessage.
          ‚úÖ–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ä—Ç StepMessage –∏–∑–ø–æ–ª–∑–≤–∞ prop step –∏ –¥–µ—Ü–∞ (children), –∫–æ–∏—Ç–æ —Å–µ –ø—Ä–µ–¥–∞–≤–∞—Ç –º–µ–∂–¥—É –æ—Ç–≤–∞—Ä—è—â–∏—è –∏ –∑–∞—Ç–≤–∞—Ä—è—â–∏—è —Ç–∞–≥ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞*/}
      <StepMessage step={1}>
        <p>Pass in content</p>
        <p>‚úåÔ∏è</p>
      </StepMessage>
      <StepMessage step={2}>
        <p>Read children prop</p>
        <p>üòé</p>
      </StepMessage>
      {/* <Steps /> */}
    </div>
  );
}

function Steps() {
  const [step, setStep] = useState(1);
  const [isOpen, setIsOpen] = useState(true);
  // ‚úÖstep –µ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞ –Ω–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ, –∫–æ—è—Ç–æ –¥—ä—Ä–∂–∏ —Ç–µ–∫—É—â–∞—Ç–∞ —Å—Ç—ä–ø–∫–∞-setStep –µ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ step-useState(1) –∑–∞–¥–∞–≤–∞ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ step –∫–∞—Ç–æ 1.
  // ‚úÖ isOpen –µ –±—É–ª–µ–≤–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞ –Ω–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ, –∫–æ—è—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞ –¥–∞–ª–∏ –µ –æ—Ç–≤–æ—Ä–µ–Ω–æ. -useState(true) –∑–∞–¥–∞–≤–∞ –Ω–∞—á–∞–ª–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç true, –∫–æ–µ—Ç–æ –æ–∑–Ω–∞—á–∞–≤–∞, —á–µ –µ –æ—Ç–≤–æ—Ä–µ–Ω–æ.

  // const [test, setTest] = useState({ name: "Jonas" });

  // ‚úÖ–ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–µ –Ω–∞ –±—É—Ç–æ–Ω–∞ handlePrevious() —â–µ –Ω–∞–º–∞–ª–∏ step, –∞–∫–æ –Ω–µ —Å–º–µ –Ω–∞ –ø—ä—Ä–≤–∞—Ç–∞ —Å—Ç—ä–ø–∫–∞.
  // ‚úÖ–¢–æ–≤–∞ –µ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –±—É—Ç–æ–Ω ("–ü—Ä–µ–¥–∏—à–Ω–∞ —Å—Ç—ä–ø–∫–∞") –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ–π—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞ useState –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ —Å—Ç—ä–ø–∫–∏—Ç–µ (step).
  function handlePrevious() {
    if (step > 1) setStep((s) => s - 1);
    // ‚úÖ–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ step –µ –ø–æ-–≥–æ–ª—è–º–æ –æ—Ç 1: - setStep –µ —Ñ—É–Ω–∫—Ü–∏—è –∫–∞—Ç–æ –Ω–∞–º–∞–ª—è–≤–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –º—É —Å 1:
    // ‚úÖ–ë—É—Ç–æ–Ω—ä—Ç –µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω (disabled={step === 1}), –∑–∞ –¥–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–º –≤—Ä—ä—â–∞–Ω–µ –ø—Ä–µ–¥–∏ —Å—Ç—ä–ø–∫–∞ 1.
  }

  // ‚úÖ–û–±—Ä–∞–±–æ—Ç–≤–∞ —Å–µ —á—Ä–µ–∑ –±—É—Ç–æ–Ω onClick={handleNext}.
  function handleNext() {
    //‚úÖ–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ step –µ –ø–æ-–º–∞–ª–∫–æ –æ—Ç 3:
    if (step < 3) {
      setStep((s) => s + 1);
      //‚úÖ–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞ step, –∫–∞—Ç–æ –≥–æ —É–≤–µ–ª–∏—á–∞–≤–∞ —Å 1:
      // setStep((s) => s + 1);
    }

    // BAD PRACTICE
    // test.name = "Fred";
    // setTest({ name: "Fred" });
  }

  return (
    // ‚úÖ–î–æ–±–∞–≤—è —Å—ä–±–∏—Ç–∏–µ onClick, –∫–æ–µ—Ç–æ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–µ –Ω–∞ –±—É—Ç–æ–Ω–∞
    <div>
      <button className="close" onClick={() => setIsOpen((is) => !is)}>
        &times;
      </button>

      {/*‚úÖ –ê–∫–æ isOpen –µ true, —Å—Ç–∞–≤–∞ false, –∏ –æ–±—Ä–∞—Ç–Ω–æ.
          ‚úÖ–ê–∫–æ isOpen === false, –Ω–∏—â–æ –Ω—è–º–∞ –¥–∞ —Å–µ –ø–æ–∫–∞–∂–µ.
          ‚úÖ–°—ä–∑–¥–∞–≤–∞ div —Å –∫–ª–∞—Å "steps", –∫–æ–π—Ç–æ —Å—ä–¥—ä—Ä–∂–∞ —á–∏—Å–ª–∞ (–µ—Ç–∞–ø–∏ –Ω–∞ –ø—Ä–æ—Ü–µ—Å–∞).
          ‚úÖ–ö–ª–∞—Å active –∑–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –∏–ª–∏ –ø—Ä–µ–º–∏–Ω–∞—Ç–∏—Ç–µ —Å—Ç—ä–ø–∫–∏: */}
      {isOpen && (
        <div className="steps">
          <div className="numbers">
            <div className={step >= 1 ? "active" : ""}>1</div>
            <div className={step >= 2 ? "active" : ""}>2</div>
            <div className={step >= 3 ? "active" : ""}>3</div>
          </div>

          {/* ‚úÖStep {step}: –ò–∑–ø–æ–ª–∑–≤–∞ React JSX –∏–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è {}, –∑–∞ –¥–∞ –ø–æ–∫–∞–∂–µ —Ç–µ–∫—É—â–∞—Ç–∞ —Å—Ç—ä–ø–∫–∞ (step). */}
          <StepMessage step={step}>
            {messages[step - 1]}
            {/* ‚úÖ{messages[step - 1]} –ò–∑–≤–ª–∏—á–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∑–∞ —Ç–µ–∫—É—â–∞—Ç–∞ —Å—Ç—ä–ø–∫–∞ –æ—Ç –º–∞—Å–∏–≤–∞ messages, –∫–∞—Ç–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–∞ —Å step - 1 (–∑–∞—â–æ—Ç–æ –º–∞—Å–∏–≤–∏—Ç–µ –≤ JavaScript –∑–∞–ø–æ—á–≤–∞—Ç –æ—Ç 0).  */}
            <div className="buttons">
              <Button
                bgColor="#e7e7e7"
                textColor="#333"
                onClick={() => alert(`Learn how to ${messages[step - 1]}`)}
              >
                Learn how
              </Button>
            </div>
          </StepMessage>

          {/* ‚úÖ–°—ä–∑–¥–∞–≤–∞ –±—É—Ç–æ–Ω <button> —Å CSS –∫–ª–∞—Å "close" */}
          <div className="buttons">
            <Button bgColor="#7950f2" textColor="#fff" onClick={handlePrevious}>
              <span>üëà</span> Previous
            </Button>

            <Button bgColor="#7950f2" textColor="#fff" onClick={handleNext}>
              Next <span>üëâ</span>
              <span>ü§ì</span>
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

// ‚úÖStepMessage. –¢–æ–π –ø—Ä–∏–µ–º–∞ props (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏), –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ step –∏ children, –∏ —Ä–µ–Ω–¥–∏—Ä–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –≤—ä–∑ –æ—Å–Ω–æ–≤–∞ –Ω–∞ —Ç—è—Ö
function StepMessage({ step, children }) {
  return (
    // ‚úÖ–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ä—Ç –≤—Ä—ä—â–∞ <div>, –∫–æ–π—Ç–æ —Å—ä–¥—ä—Ä–∂–∞ –∫–ª–∞—Å "message".
    // –¢–æ–≤–∞ —â–µ –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –∑–∞ —Å—Ç–∏–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–∑–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å CSS
    <div className="message">
      <h3>Step {step}</h3>
      {children}
    </div>
  );
}

function Button({ textColor, bgColor, onClick, children }) {
  return (
    <button
      style={{ backgroundColor: bgColor, color: textColor }}
      onClick={onClick}
    >
      {children}
    </button>
  );
}
